<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Leo Torres</title><link href="/" rel="alternate"></link><link href="/feeds/today.atom.xml" rel="self"></link><id>/</id><updated>2016-08-08T00:00:00-04:00</updated><entry><title>Today I drew circles</title><link href="/blog/circles.html" rel="alternate"></link><published>2016-08-08T00:00:00-04:00</published><author><name>Leo Torres</name></author><id>tag:,2016-08-08:blog/circles.html</id><summary type="html">&lt;p&gt;Recently I was told there's a &lt;em&gt;Visualization in Network Science&lt;/em&gt; course
being given this Fall at my
&lt;a href="http://www.networkscienceinstitute.org"&gt;program&lt;/a&gt;, and I of course want to
take it.  The Prof said I should brush up or learn Javascript and d3, and I
of course know nothing about either so I thought of getting an early start.&lt;/p&gt;
&lt;p&gt;I had some social network data from the internal
&lt;a href="https://www.recurse.com"&gt;Recurse Center&lt;/a&gt; chat system that I haven't used
yet, so I thought about visualizing it first before diving into more
in-depth
&lt;a href="https://en.wikipedia.org/wiki/Social_network_analysis"&gt;social network analysis&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is the result:&lt;/p&gt;
&lt;p&gt;&lt;body&gt;
  &lt;svg class="chart" width="500" height="500"&gt;
    &lt;g class="links"&gt;
      &lt;line stroke="#aaa" x1="325" y1="120.0961894323342" x2="107.34152255572698" y2="203.64745084375787"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="265.67926949014804" y1="100.821715694759" x2="399.178284305241" y2="265.67926949014816"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="399.178284305241" y1="234.32073050985198" x2="296.3525491562421" y2="107.34152255572698"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="325" y1="120.0961894323342" x2="103.27785988992915" y2="281.18675362266384"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="265.67926949014804" y1="100.821715694759" x2="399.178284305241" y2="234.32073050985198"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="399.178284305241" y1="234.32073050985198" x2="392.658477444273" y2="296.35254915624216"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="325" y1="120.0961894323342" x2="387.03181864639015" y2="311.01049646137005"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="325" y1="120.0961894323342" x2="112.96818135360985" y2="188.98950353863"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="325" y1="120.0961894323342" x2="112.96818135360985" y2="188.98950353863"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="265.67926949014804" y1="100.821715694759" x2="399.178284305241" y2="234.32073050985198"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="265.67926949014804" y1="100.821715694759" x2="392.658477444273" y2="296.35254915624216"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="175.00000000000003" y1="120.0961894323342" x2="396.7221401100708" y2="281.18675362266396"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="325" y1="120.0961894323342" x2="296.3525491562421" y2="392.65847744427305"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="265.67926949014804" y1="100.821715694759" x2="392.658477444273" y2="296.35254915624216"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="325" y1="120.0961894323342" x2="120.0961894323342" y2="175"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="325" y1="120.0961894323342" x2="338.16778784387094" y2="371.35254915624216"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="371.3525491562421" y1="161.83221215612903" x2="379.9038105676658" y2="175"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="392.658477444273" y1="203.6474508437579" x2="387.0318186463901" y2="188.98950353862998"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="265.67926949014804" y1="100.821715694759" x2="311.01049646137005" y2="112.96818135360988"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="325" y1="120.0961894323342" x2="371.3525491562421" y2="338.167787843871"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="218.81324637733613" y1="103.27785988992915" x2="350.3695909538287" y2="138.52827617839085"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="161.83221215612906" y1="128.6474508437579" x2="350.3695909538287" y2="138.52827617839085"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="325" y1="120.0961894323342" x2="379.90381056766574" y2="325.00000000000006"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="325" y1="120.0961894323342" x2="311.01049646136994" y2="387.03181864639015"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="265.67926949014804" y1="100.821715694759" x2="203.6474508437579" y2="107.34152255572695"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="325" y1="120.0961894323342" x2="138.52827617839085" y2="350.3695909538287"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="311.01049646136994" y1="387.03181864639015" x2="361.47172382160903" y2="350.36959095382883"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="203.6474508437579" y1="107.34152255572695" x2="265.67926949014804" y2="100.821715694759"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="161.83221215612906" y1="128.6474508437579" x2="350.3695909538287" y2="138.52827617839085"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="100.821715694759" y1="234.32073050985193" x2="120.0961894323342" y2="175"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="325" y1="120.0961894323342" x2="379.90381056766574" y2="325.00000000000006"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="325" y1="120.0961894323342" x2="296.3525491562421" y2="392.65847744427305"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="250" y1="100" x2="350.3695909538287" y2="138.52827617839085"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="188.98950353862998" y1="387.03181864639015" x2="120.0961894323342" y2="175"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="100.821715694759" y1="234.32073050985193" x2="107.34152255572698" y2="296.35254915624216"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="100.821715694759" y1="234.32073050985193" x2="100.821715694759" y2="265.67926949014804"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="100" y1="249.99999999999997" x2="107.34152255572698" y2="296.35254915624216"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="361.47172382160915" y1="149.63040904617128" x2="218.81324637733604" y2="396.7221401100708"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="250" y1="100" x2="338.167787843871" y2="128.6474508437579"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="218.81324637733613" y1="103.27785988992915" x2="350.3695909538287" y2="138.52827617839085"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="311.01049646136994" y1="387.03181864639015" x2="174.99999999999994" y2="379.90381056766574"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="161.83221215612906" y1="128.6474508437579" x2="350.3695909538287" y2="138.52827617839085"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="350.3695909538288" y1="361.4717238216091" x2="149.63040904617122" y2="361.4717238216091"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="112.96818135360985" y1="311.01049646137" x2="311.01049646136994" y2="387.03181864639015"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="188.98950353862998" y1="112.96818135360985" x2="350.3695909538288" y2="361.4717238216091"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="350.3695909538288" y1="361.4717238216091" x2="188.98950353862998" y2="112.96818135360985"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="311.01049646136994" y1="387.03181864639015" x2="138.52827617839085" y2="350.3695909538287"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="311.01049646136994" y1="387.03181864639015" x2="234.32073050985187" y2="399.178284305241"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="250" y1="100" x2="350.3695909538287" y2="138.52827617839085"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="281.1867536226639" y1="103.27785988992915" x2="128.6474508437579" y2="338.16778784387094"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="161.83221215612906" y1="128.6474508437579" x2="350.3695909538287" y2="138.52827617839085"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="100" y1="249.99999999999997" x2="120.0961894323342" y2="175"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="325" y1="120.0961894323342" x2="100" y2="249.99999999999997"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="250" y1="100" x2="371.3525491562421" y2="338.167787843871"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="325" y1="120.0961894323342" x2="281.1867536226639" y2="396.7221401100708"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="325" y1="120.0961894323342" x2="174.99999999999994" y2="379.90381056766574"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="311.01049646136994" y1="387.03181864639015" x2="379.9038105676658" y2="175"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="325" y1="120.0961894323342" x2="350.3695909538288" y2="361.4717238216091"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="325" y1="120.0961894323342" x2="100.821715694759" y2="265.67926949014804"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="325" y1="120.0961894323342" x2="325" y2="379.9038105676658"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="325" y1="120.0961894323342" x2="361.47172382160903" y2="350.36959095382883"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="100" y1="249.99999999999997" x2="311.01049646136994" y2="387.03181864639015"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="325" y1="120.0961894323342" x2="387.03181864639015" y2="311.01049646137005"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="325" y1="120.0961894323342" x2="379.90381056766574" y2="325.00000000000006"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="361.47172382160915" y1="149.63040904617128" x2="128.6474508437579" y2="338.16778784387094"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="325" y1="120.0961894323342" x2="100" y2="249.99999999999997"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="325" y1="120.0961894323342" x2="100" y2="249.99999999999997"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="387.03181864639015" y1="311.01049646137005" x2="350.3695909538288" y2="361.4717238216091"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="325" y1="120.0961894323342" x2="100" y2="249.99999999999997"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="218.81324637733613" y1="103.27785988992915" x2="338.167787843871" y2="128.6474508437579"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="325" y1="120.0961894323342" x2="371.3525491562421" y2="338.167787843871"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="161.83221215612906" y1="128.6474508437579" x2="350.3695909538287" y2="138.52827617839085"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="338.167787843871" y1="128.6474508437579" x2="112.96818135360985" y2="188.98950353863"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="338.167787843871" y1="128.6474508437579" x2="103.27785988992915" y2="218.8132463773361"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="112.96818135360985" y1="188.98950353863" x2="338.167787843871" y2="128.6474508437579"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="103.27785988992915" y1="218.8132463773361" x2="338.167787843871" y2="128.6474508437579"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="325" y1="379.9038105676658" x2="338.167787843871" y2="128.6474508437579"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="161.83221215612906" y1="128.6474508437579" x2="350.3695909538287" y2="138.52827617839085"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="296.3525491562421" y1="392.65847744427305" x2="338.167787843871" y2="128.6474508437579"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="325" y1="120.0961894323342" x2="265.6792694901481" y2="399.178284305241"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="100.821715694759" y1="234.32073050985193" x2="361.47172382160903" y2="350.36959095382883"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="188.98950353862998" y1="387.03181864639015" x2="361.47172382160903" y2="350.36959095382883"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="265.6792694901481" y1="399.178284305241" x2="361.47172382160903" y2="350.36959095382883"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="311.01049646136994" y1="387.03181864639015" x2="361.47172382160903" y2="350.36959095382883"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="138.52827617839085" y1="350.3695909538287" x2="361.47172382160903" y2="350.36959095382883"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="296.3525491562421" y1="392.65847744427305" x2="361.47172382160903" y2="350.36959095382883"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="203.64745084375787" y1="392.658477444273" x2="128.6474508437579" y2="338.16778784387094"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="120.0961894323342" y1="325" x2="203.64745084375787" y2="392.658477444273"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="203.64745084375787" y1="392.658477444273" x2="120.0961894323342" y2="325"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="128.6474508437579" y1="338.16778784387094" x2="120.0961894323342" y2="325"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="128.6474508437579" y1="338.16778784387094" x2="203.64745084375787" y2="392.658477444273"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="218.81324637733604" y1="396.7221401100708" x2="149.6304090461713" y2="138.52827617839083"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="128.6474508437579" y1="338.16778784387094" x2="249.99999999999997" y2="400"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="120.0961894323342" y1="325" x2="149.6304090461713" y2="138.52827617839083"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="203.64745084375787" y1="392.658477444273" x2="149.6304090461713" y2="138.52827617839083"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="161.83221215612906" y1="128.6474508437579" x2="350.3695909538287" y2="138.52827617839085"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="325" y1="120.0961894323342" x2="387.03181864639015" y2="311.01049646137005"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="311.01049646136994" y1="387.03181864639015" x2="361.47172382160903" y2="350.36959095382883"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="311.01049646136994" y1="387.03181864639015" x2="361.47172382160903" y2="350.36959095382883"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="361.47172382160915" y1="149.63040904617128" x2="112.96818135360985" y2="188.98950353863"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="100" y1="249.99999999999997" x2="120.0961894323342" y2="175"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="112.96818135360985" y1="311.01049646137" x2="188.98950353862998" y2="387.03181864639015"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="100" y1="249.99999999999997" x2="387.03181864639015" y2="311.01049646137005"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="387.03181864639015" y1="311.01049646137005" x2="149.63040904617122" y2="361.4717238216091"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="161.83221215612906" y1="128.6474508437579" x2="350.3695909538287" y2="138.52827617839085"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="128.6474508437579" y1="338.16778784387094" x2="350.3695909538287" y2="138.52827617839085"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="338.167787843871" y1="128.6474508437579" x2="128.6474508437579" y2="161.832212156129"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="188.98950353862998" y1="387.03181864639015" x2="338.167787843871" y2="128.6474508437579"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="338.167787843871" y1="128.6474508437579" x2="188.98950353862998" y2="387.03181864639015"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="161.83221215612906" y1="128.6474508437579" x2="350.3695909538287" y2="138.52827617839085"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="128.6474508437579" y1="338.16778784387094" x2="103.27785988992915" y2="281.18675362266384"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="120.0961894323342" y1="325" x2="128.6474508437579" y2="338.16778784387094"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="128.6474508437579" y1="338.16778784387094" x2="350.3695909538287" y2="138.52827617839085"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="149.6304090461713" y1="138.52827617839083" x2="128.6474508437579" y2="338.16778784387094"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="149.6304090461713" y1="138.52827617839083" x2="203.64745084375787" y2="392.658477444273"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="387.03181864639015" y1="311.01049646137005" x2="120.0961894323342" y2="325"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="396.7221401100709" y1="218.8132463773361" x2="361.47172382160915" y2="149.63040904617128"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="128.6474508437579" y1="338.16778784387094" x2="161.832212156129" y2="371.3525491562421"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="128.6474508437579" y1="338.16778784387094" x2="149.6304090461713" y2="138.52827617839083"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="128.6474508437579" y1="338.16778784387094" x2="138.52827617839085" y2="149.63040904617128"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="399.178284305241" y1="234.32073050985198" x2="338.167787843871" y2="128.6474508437579"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="203.64745084375787" y1="392.658477444273" x2="387.03181864639015" y2="311.01049646137005"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="128.6474508437579" y1="338.16778784387094" x2="107.34152255572698" y2="203.64745084375787"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="203.64745084375787" y1="392.658477444273" x2="188.98950353862998" y2="387.03181864639015"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="203.64745084375787" y1="392.658477444273" x2="128.6474508437579" y2="338.16778784387094"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="387.03181864639015" y1="311.01049646137005" x2="203.64745084375787" y2="392.658477444273"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="203.64745084375787" y1="392.658477444273" x2="387.03181864639015" y2="311.01049646137005"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="149.6304090461713" y1="138.52827617839083" x2="128.6474508437579" y2="338.16778784387094"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="138.52827617839085" y1="149.63040904617128" x2="128.6474508437579" y2="338.16778784387094"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="400" y1="250" x2="112.96818135360985" y2="188.98950353863"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="175.00000000000003" y1="120.0961894323342" x2="234.320730509852" y2="100.82171569475898"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="234.320730509852" y1="100.82171569475898" x2="175.00000000000003" y2="120.0961894323342"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="100" y1="249.99999999999997" x2="203.64745084375787" y2="392.658477444273"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="311.01049646136994" y1="387.03181864639015" x2="265.6792694901481" y2="399.178284305241"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="138.52827617839085" y1="350.3695909538287" x2="400" y2="250"&gt;&lt;/line&gt;
      &lt;line stroke="#aaa" x1="379.90381056766574" y1="325.00000000000006" x2="396.7221401100709" y2="218.8132463773361"&gt;&lt;/line&gt;
    &lt;/g&gt;
    &lt;g class="nodes"&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="400" cy="250" fill="#1f77b4"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="399.178284305241" cy="234.32073050985198" fill="#aec7e8"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="396.7221401100709" cy="218.8132463773361" fill="#aec7e8"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="392.658477444273" cy="203.6474508437579" fill="#aec7e8"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="387.0318186463901" cy="188.98950353862998" fill="#aec7e8"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="379.9038105676658" cy="175" fill="#aec7e8"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="371.3525491562421" cy="161.83221215612903" fill="#ff7f0e"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="361.47172382160915" cy="149.63040904617128" fill="#ffbb78"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="350.3695909538287" cy="138.52827617839085" fill="#ffbb78"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="338.167787843871" cy="128.6474508437579" fill="#ffbb78"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="325" cy="120.0961894323342" fill="#ffbb78"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="311.01049646137005" cy="112.96818135360988" fill="#ffbb78"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="296.3525491562421" cy="107.34152255572698" fill="#ffbb78"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="281.1867536226639" cy="103.27785988992915" fill="#ffbb78"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="265.67926949014804" cy="100.821715694759" fill="#ffbb78"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="250" cy="100" fill="#ffbb78"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="234.320730509852" cy="100.82171569475898" fill="#ffbb78"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="218.81324637733613" cy="103.27785988992915" fill="#ffbb78"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="203.6474508437579" cy="107.34152255572695" fill="#ffbb78"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="188.98950353862998" cy="112.96818135360985" fill="#ffbb78"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="175.00000000000003" cy="120.0961894323342" fill="#ffbb78"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="161.83221215612906" cy="128.6474508437579" fill="#ffbb78"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="149.6304090461713" cy="138.52827617839083" fill="#ffbb78"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="138.52827617839085" cy="149.63040904617128" fill="#ffbb78"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="128.6474508437579" cy="161.832212156129" fill="#ffbb78"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="120.0961894323342" cy="175" fill="#2ca02c"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="112.96818135360985" cy="188.98950353863" fill="#2ca02c"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="107.34152255572698" cy="203.64745084375787" fill="#2ca02c"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="103.27785988992915" cy="218.8132463773361" fill="#2ca02c"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="100.821715694759" cy="234.32073050985193" fill="#2ca02c"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="100" cy="249.99999999999997" fill="#2ca02c"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="100.821715694759" cy="265.67926949014804" fill="#2ca02c"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="103.27785988992915" cy="281.18675362266384" fill="#2ca02c"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="107.34152255572698" cy="296.35254915624216" fill="#2ca02c"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="112.96818135360985" cy="311.01049646137" fill="#2ca02c"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="120.0961894323342" cy="325" fill="#98df8a"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="128.6474508437579" cy="338.16778784387094" fill="#98df8a"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="138.52827617839085" cy="350.3695909538287" fill="#d62728"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="149.63040904617122" cy="361.4717238216091" fill="#d62728"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="161.832212156129" cy="371.3525491562421" fill="#d62728"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="174.99999999999994" cy="379.90381056766574" fill="#d62728"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="188.98950353862998" cy="387.03181864639015" fill="#d62728"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="203.64745084375787" cy="392.658477444273" fill="#d62728"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="218.81324637733604" cy="396.7221401100708" fill="#d62728"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="234.32073050985187" cy="399.178284305241" fill="#d62728"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="249.99999999999997" cy="400" fill="#d62728"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="265.6792694901481" cy="399.178284305241" fill="#d62728"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="281.1867536226639" cy="396.7221401100708" fill="#d62728"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="296.3525491562421" cy="392.65847744427305" fill="#d62728"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="311.01049646136994" cy="387.03181864639015" fill="#d62728"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="325" cy="379.9038105676658" fill="#d62728"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="338.16778784387094" cy="371.35254915624216" fill="#d62728"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="350.3695909538288" cy="361.4717238216091" fill="#d62728"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="361.47172382160903" cy="350.36959095382883" fill="#d62728"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="371.3525491562421" cy="338.167787843871" fill="#d62728"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="379.90381056766574" cy="325.00000000000006" fill="#d62728"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="387.03181864639015" cy="311.01049646137005" fill="#d62728"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="392.658477444273" cy="296.35254915624216" fill="#ff9896"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="396.7221401100708" cy="281.18675362266396" fill="#ff9896"&gt;&lt;/circle&gt;&lt;/g&gt;
      &lt;g&gt;&lt;circle stroke="#fff" r="5" cx="399.178284305241" cy="265.67926949014816" fill="#ff9896"&gt;&lt;/circle&gt;&lt;/g&gt;
    &lt;/g&gt;
  &lt;/svg&gt;&lt;/p&gt;
&lt;p&gt;After spending one afternoon reading about &lt;a href="https://d3js.org/"&gt;d3.js&lt;/a&gt; and
its design principles, here are my first impressions.&lt;/p&gt;
&lt;h3&gt;Readability&lt;/h3&gt;
&lt;p&gt;I really like how readable the
&lt;a href="https://bl.ocks.org/mbostock/4062045"&gt;resulting&lt;/a&gt; code is.  I'm a sucker
for good-quality code and I like when code can be read as prose.
Well-written code shouldn't incur in high
&lt;a href="http://chrismm.com/blog/writing-good-code-reduce-the-cognitive-load/"&gt;cognitive load&lt;/a&gt;
and it shouldn't get in the way of understanding what the code is trying to
do: it should be as clear as possible.  (This can be easier or harder
depending on your programming language.)&lt;/p&gt;
&lt;p&gt;However, d3's readability comes at a cost.  If you
&lt;a href="https://github.com/d3/d3-scale/blob/master/README.md#continuous_domain"&gt;read&lt;/a&gt;
&lt;a href="https://github.com/d3/d3-selection#selection_attr"&gt;the&lt;/a&gt;
&lt;a href="https://github.com/d3/d3-force#simulation_alpha"&gt;documentation&lt;/a&gt; you can
see that functions are overloaded so as to perform different tasks
depending on what arguments they receive.  So, instead of a &lt;em&gt;getter&lt;/em&gt; and a
&lt;em&gt;setter&lt;/em&gt; you have the same function do both tasks.  That's not a problem in
itself, the problem (&lt;em&gt;my&lt;/em&gt; problem with it) is that these functions return
completely different objects depending on whether or not they received an
argument.  Sometimes they return the current selection (when you &lt;em&gt;set&lt;/em&gt;) and
sometimes they return the current value of something (when you &lt;em&gt;get&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Yes, it makes sense from one point of view.  But I felt it was hard to
debug and I was reading the documentation considerably more than when
learning to use other libraries.&lt;/p&gt;
&lt;p&gt;The resulting code looks awesome, &lt;em&gt;once you know exactly what to write&lt;/em&gt;.
Note that I didn't say &lt;em&gt;how to write&lt;/em&gt;, as this isn't an stylistic
consideration, this is about the design of the whole library and which
function does &lt;em&gt;what&lt;/em&gt; and in what context.&lt;/p&gt;
&lt;p&gt;Don't get me wrong, I'm all for the declarative design, and this all just
means the learning curve is a little steeper (or I should say more
&lt;a href="http://english.stackexchange.com/a/6226"&gt;gradual&lt;/a&gt;) than I expected.&lt;/p&gt;
&lt;h3&gt;Data Model&lt;/h3&gt;
&lt;p&gt;I think the &lt;em&gt;data joins&lt;/em&gt; that d3 implements are genius.  It makes so much
sense to have exactly one DOM element correspond to one datum, and the
functionality provided by &lt;code&gt;enter&lt;/code&gt; and &lt;code&gt;exit&lt;/code&gt; complements this really well.&lt;/p&gt;
&lt;p&gt;This makes the data model really simple and the code really transparent
(see above), BUT there's no such thing as a free lunch.  The trade off is
that one is forced to structure the data in a way that is amenable to be
manipulated this way, and the time that would have been spent in assigning
the correct datum to the correct element is instead spent in restructuring
the data in a good-enough way for d3.&lt;/p&gt;
&lt;p&gt;Some examples of the questions I asked myself while doing the visualization
were: &lt;em&gt;are each of my data a single number or a whole object?&lt;/em&gt;, &lt;em&gt;are labels
part of my original data or a separate array?&lt;/em&gt;, &lt;em&gt;if they are separate, how
can I make sure they are kept in the right order?&lt;/em&gt;, and so on.&lt;/p&gt;
&lt;p&gt;Now that I think of it, being forced to restructure one's data in a
&lt;em&gt;sensible&lt;/em&gt; way from the beginning is probably a really healthy habit to
pick up.  The problem is now figuring out if d3's version of &lt;em&gt;sensible&lt;/em&gt; is
also desirable for data analysis, and not just visualization.&lt;/p&gt;
&lt;h3&gt;Visualization stuff&lt;/h3&gt;
&lt;p&gt;This is more of a personal pet peeve and nothing at all to do with d3, but
for the life of me, I can't get into generating visualizations.  While
picking color palettes, layouts, fonts and even the underlying data
structure, I felt I was doing more flower arrangement than programming.
Look, I love flowers, I think they're really nice (honestly, I do), but
when I'm dealing with data, I want to make do it do cool stuff, I want it
to reveal its secrets to me, and I want to do it by programming.&lt;/p&gt;
&lt;p&gt;I know visualization is enormously important, and it's getting more and
more useful for exploratory data analysis too, but I guess I just haven't
found the way to enjoy it that much yet.  I hope to find my way around it
soon!&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;To sum up, I spent the afternoon drawing circles, d3's declarative paradigm
is interesting and readable (but it comes at a cost), I'm not a design
person, and flowers are nice.&lt;/p&gt;
&lt;p&gt;All in all, I enjoyed learning about d3, and seeing
&lt;a href="https://bl.ocks.org/mbostock/4062045"&gt;what&lt;/a&gt;
&lt;a href="https://bost.ocks.org/mike/miserables/"&gt;it&lt;/a&gt;
&lt;a href="https://bl.ocks.org/mbostock/afecf1ce04644ad9036ca146d2084895"&gt;can&lt;/a&gt;
&lt;a href="https://bl.ocks.org/mbostock/2e12b0bd732e7fe4000e2d11ecab0268"&gt;do&lt;/a&gt; for
Network Science. I'm looking forward to getting the hang of flower
arrangement.&lt;/p&gt;</summary><category term="webdev"></category><category term="d3"></category><category term="networks"></category><category term="recurse"></category></entry><entry><title>Today I wrote a pelican plugin</title><link href="/blog/plugin.html" rel="alternate"></link><published>2016-07-31T00:00:00-04:00</published><author><name>Leo Torres</name></author><id>tag:,2016-07-31:blog/plugin.html</id><summary type="html">&lt;p&gt;Today I wrote another thing. One feature of
&lt;a href="http://erdosnet.work"&gt;&lt;strong&gt;erdos&lt;/strong&gt;&lt;/a&gt; that I like a lot is the
&lt;a href="http://erdosnet.work/glossary.html"&gt;glossary&lt;/a&gt; page. To build it, I had the
pelican configuration file, which is loaded well before the final html is
generated, read all article pages and extract Markdown
&lt;a href="https://pythonhosted.org/Markdown/extensions/definition_lists.html"&gt;definition lists&lt;/a&gt;
(which apparently are not part of standard Markdown but they totally
should) and store them as part of pelican's main settings dictionary.&lt;/p&gt;
&lt;p&gt;This had a few downsides.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;I was cramming application logic inside &lt;code&gt;pelicanconf.py&lt;/code&gt;, which is
supposed to, well, configure pelican, not generate code for templates.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I was opening and reading every article page before pelican did so
itself, at different times, for more or less related reasons.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I knew there was a better way of passing new variables to templates, but
   didn't exactly know how to.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Recently, I came across what should provide a good solution. There's a
bunch of &lt;a href="https://github.com/getpelican/pelican-plugins"&gt;pelican plugins&lt;/a&gt;
floating around, and I knew reading some would provide the answer.&lt;/p&gt;
&lt;p&gt;What happened after that was a lot of glue code, git-fu, refactoring,
documentation reading, StackOverflow scouring, jinja templating, html
parsing, and css experimenting. Honestly, none of those things on their own
was enough to write a whole blog post, but I still learned a lot, and felt
quite accomplished when done.&lt;/p&gt;
&lt;p&gt;So, briefly, this is more or less how it went, how I dealt with stuff, and
what I learned this weekend.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First I read a bunch of code from the
   &lt;a href="https://github.com/getpelican/pelican-plugins"&gt;pelican-plugins&lt;/a&gt;
   repo. Some of them were interesting and well-written, some weren't. At
   least I learned that what I needed was add a variable to the
   &lt;code&gt;PageGenerator&lt;/code&gt; context, so it would be visible to all page templates.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then I figured out that I needed my new plugin to act at two different
   times: every time an article was read, I needed to extract the
   definition lists inside &lt;code&gt;&amp;lt;dl&amp;gt;&lt;/code&gt; tags; and before the final html was
   rendered, I needed to add my &lt;code&gt;definitions&lt;/code&gt; variable to the template
   context. Pelican provides
   &lt;a href="http://docs.getpelican.com/en/3.6.3/plugins.html#list-of-signals"&gt;signals&lt;/a&gt;
   so that plugins can act at different times of the process, but some of
   them are undocumented. Figures. I got what I needed from reading other
   people's plugins.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As I already had code that did what I wanted (only at the wrong time in
   the wrong way) and I knew how to fix it, I was ready to put it
   together. BUT, I don't have a lot of experience with contributing to
   other people's projects, so I carefully read pelican's
   &lt;a href="http://docs.getpelican.com/en/latest/contribute.html#using-git-and-github"&gt;contributing&lt;/a&gt;
   &lt;a href="https://github.com/getpelican/pelican-plugins/blob/master/Contributing.rst"&gt;guidelines&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, coded the thing together. It ended up being
   &lt;a href="https://github.com/leotrs/pelican-glossary"&gt;one python file&lt;/a&gt; with ~65
   lines of code. I used
   &lt;a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/"&gt;BeautifulSoup4&lt;/a&gt;
   to parse html, a library I'd never used before. Also, I used a dummy
   class with no methods to hold the main definition list and make it
   persistent across calls. The alternative was using a global variable,
   which I didn't want to do. I'm not sure my solution is pythonic, and it
   feels hacky for sure, but, hey it works.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pelican contributing guidelines asked me to &lt;code&gt;rebase -i&lt;/code&gt; and
   &lt;a href="https://git-scm.com/docs/git-rebase"&gt;squash&lt;/a&gt; my commits. I had &lt;em&gt;no
   idea&lt;/em&gt; what that meant a week ago, but I was able to do it without much
   problem. (The first time I did it, it was a disaster.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now I had to actually use my new code to generate the
   &lt;a href="http://erdosnet.work/glossary.html"&gt;glossary&lt;/a&gt; page. I was hesitant to
   just delete the old code and use the new one. I wanted to be able to see
   the changes. Of course, the solution was more git. I committed the
   current state of my website (I was only tracking the source files, not
   the final html), and, after some light jinja templating, I only had to
   run &lt;code&gt;git diff output/glossary.html&lt;/code&gt; and see that everything was good. It
   was reassuring to see that I was running entirely different code (the
   original hack involved... &lt;em&gt;swallows hard&lt;/em&gt;... regular expressions) at
   entirely different times in the html generation process but I had the
   exact same output, character by character. Cool!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the end, I ended up using python, pelican, git, BeautifulSoup4, html,
css, lots of documentation, and trial and error to write just 65 lines of
code, and I felt pretty accomplished when everything pulled together.&lt;/p&gt;
&lt;p&gt;Before RC, I would have been able to do step 4, and maybe the reading
documentation parts (I mean, I did know how to read before RC). But what RC
did for me was give me that skillset necessary to say "&lt;em&gt;I want to do this,
so let's figure out the best way&lt;/em&gt;". Before RC I always ran away from reading
other people's stuff, or diving into a library's codebase to see how it
actually works. Forget about anything other than git's &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;commit&lt;/code&gt;. I
had purposefully stayed away from webdev and css in particular, and now you
see me managing a whole website, not because I fell in love with webdev,
but because I believe the things I'm putting out there ought to be out
there, and webdev is just the way to do it.&lt;/p&gt;
&lt;p&gt;I felt like a &lt;em&gt;Real Programmer™&lt;/em&gt;, all because those 65 lines of code (and
doing RC for three months, and learning Pascal ten years ago...) So, if you
want to become a better programmer, &lt;em&gt;please&lt;/em&gt; click the link on the footer
(and if you can't see it, either disable ad-block, or go to
&lt;a href="https://www.recurse.com"&gt;www.recurse.com&lt;/a&gt;).  I can't wait for the next "&lt;em&gt;I
want to do this, so let's figure out the best way&lt;/em&gt;" moment, and I'm sure
after RC, neither could you!&lt;/p&gt;
&lt;p&gt;You can see the final product
&lt;a href="https://github.com/leotrs/pelican-glossary"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;PS: after this, I went and wrote
&lt;a href="https://github.com/leotrs/pelican-jinja2content"&gt;another one&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;PS &lt;em&gt;número dos&lt;/em&gt;: they just
&lt;a href="https://github.com/getpelican/pelican-plugins/pull/762"&gt;merged&lt;/a&gt; my plugin!
\o/&lt;/p&gt;</summary><category term="python"></category><category term="pelican"></category><category term="git"></category><category term="shell"></category><category term="webdev"></category><category term="recurse"></category></entry><entry><title>Today I counted triangles</title><link href="/blog/triangles.html" rel="alternate"></link><published>2016-07-29T00:00:00-04:00</published><author><name>Leo Torres</name></author><id>tag:,2016-07-29:blog/triangles.html</id><summary type="html">&lt;p&gt;Today I wrote the
&lt;a href="http://erdosnet.work/triangles-and-transitivity.html"&gt;Triangles and Transitivity&lt;/a&gt;
challenge on &lt;a href="http://www.erdosnet.work"&gt;&lt;strong&gt;erdos&lt;/strong&gt;&lt;/a&gt;. I'll skip the
introduction and context, although if you are interested in Network
Science, or in knowing if your friends are friends with each other, you
should check it out. Maybe even solve it if you're so inclined.&lt;/p&gt;
&lt;p&gt;Here, I'll even wait until you come back.&lt;/p&gt;
&lt;p&gt;Done?&lt;/p&gt;
&lt;p&gt;OK.&lt;/p&gt;
&lt;p&gt;But, really?&lt;/p&gt;
&lt;p&gt;OK.&lt;/p&gt;
&lt;p&gt;So, the challenge was counting the number of triangles in an undirected
graph, given its adjacency matrix, where a triangle is a triad of nodes all
connected to each other.&lt;/p&gt;
&lt;p&gt;My solution basically reduces to this: &lt;span class="math"&gt;\(tr(A^3)/6\)&lt;/span&gt;, where &lt;span class="math"&gt;\(A\)&lt;/span&gt; is the
adjacency matrix of the graph and &lt;span class="math"&gt;\(tr(A)\)&lt;/span&gt; is its trace. And below, the
explanation I wrote.&lt;/p&gt;
&lt;p&gt;Consider three nodes &lt;span class="math"&gt;\(i\)&lt;/span&gt;, &lt;span class="math"&gt;\(j\)&lt;/span&gt;, and &lt;span class="math"&gt;\(k\)&lt;/span&gt;. One way to determine if they form a
triangle is the following. Say &lt;span class="math"&gt;\(A\)&lt;/span&gt; is the adjacency matrix of the graph,
and &lt;span class="math"&gt;\(a_{ij}\)&lt;/span&gt; is the entry in the &lt;span class="math"&gt;\(i\)&lt;/span&gt;-th row and &lt;span class="math"&gt;\(j\)&lt;/span&gt;-th column of &lt;span class="math"&gt;\(A\)&lt;/span&gt;. If
&lt;span class="math"&gt;\(i\)&lt;/span&gt; and &lt;span class="math"&gt;\(j\)&lt;/span&gt; are adjacent, then &lt;span class="math"&gt;\(a_{ij}\)&lt;/span&gt; is equal to &lt;span class="math"&gt;\(1\)&lt;/span&gt;. If &lt;span class="math"&gt;\(i\)&lt;/span&gt;, &lt;span class="math"&gt;\(j\)&lt;/span&gt;, and
&lt;span class="math"&gt;\(k\)&lt;/span&gt; form a triangle, we need all of &lt;span class="math"&gt;\(a_{ij}\)&lt;/span&gt;, &lt;span class="math"&gt;\(a_{ik}\)&lt;/span&gt;, and &lt;span class="math"&gt;\(a_{kj}\)&lt;/span&gt; all
equal to &lt;span class="math"&gt;\(1\)&lt;/span&gt;. This happens if and only if the product &lt;span class="math"&gt;\(a_{ij} * a_{ik} *
a_{kj}\)&lt;/span&gt; is also equal to &lt;span class="math"&gt;\(1\)&lt;/span&gt;.  Knowing this, we can count the number of
triangles that include node &lt;span class="math"&gt;\(i\)&lt;/span&gt; by summing up over all &lt;span class="math"&gt;\(j\)&lt;/span&gt; and &lt;span class="math"&gt;\(k\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$\sum_j \sum_k a_{ij} a_{ik}  a_{kj},$$&lt;/div&gt;
&lt;p&gt;which can be rearranged as follows:&lt;/p&gt;
&lt;div class="math"&gt;$$\sum_j a_{ij} \sum_k a_{ik} a_{kj}.$$&lt;/div&gt;
&lt;p&gt;Now, the term inside the second sum is equal to the entry on the &lt;span class="math"&gt;\(i\)&lt;/span&gt;-th
row, &lt;span class="math"&gt;\(j\)&lt;/span&gt;-th column of &lt;span class="math"&gt;\(A^2\)&lt;/span&gt;, the second power of the adjacency matrix
&lt;span class="math"&gt;\(A\)&lt;/span&gt;. (This fact can be checked in any introductory matrix algebra book.) We
will call it &lt;span class="math"&gt;\(b_{ij}\)&lt;/span&gt;. Observe that the expression &lt;span class="math"&gt;\(a_{ik} a_{kj}\)&lt;/span&gt; is equal
to &lt;span class="math"&gt;\(1\)&lt;/span&gt; if and only if there is a length-2 path from &lt;span class="math"&gt;\(i\)&lt;/span&gt; to &lt;span class="math"&gt;\(j\)&lt;/span&gt;, going
through &lt;span class="math"&gt;\(k\)&lt;/span&gt;. By summing up over &lt;span class="math"&gt;\(k\)&lt;/span&gt;, we obtain that &lt;span class="math"&gt;\(b_{ij} = \sum_k a_{ik}
a_{kj}\)&lt;/span&gt; is the total number of length-2 paths starting in &lt;span class="math"&gt;\(i\)&lt;/span&gt; and ending in
&lt;span class="math"&gt;\(j\)&lt;/span&gt;. This will be used later.&lt;/p&gt;
&lt;p&gt;Now, we have&lt;/p&gt;
&lt;div class="math"&gt;$$\sum_j a_{ij} * b_{ji}.$$&lt;/div&gt;
&lt;p&gt;By the same token as before, this expression is equal to &lt;span class="math"&gt;\(c_{ii}\)&lt;/span&gt;, the
&lt;span class="math"&gt;\(i,i\)&lt;/span&gt;-th entry in the &lt;em&gt;third&lt;/em&gt; power of &lt;span class="math"&gt;\(A\)&lt;/span&gt;. (Where we have used the fact
that &lt;span class="math"&gt;\(A^2\)&lt;/span&gt; is a symmetryc matrix to say that &lt;span class="math"&gt;\(b_{ij} = b_{ji}\)&lt;/span&gt;.)&lt;/p&gt;
&lt;p&gt;In all, we have proved that the &lt;span class="math"&gt;\(c_{ii}\)&lt;/span&gt; entry in the third power of &lt;span class="math"&gt;\(A\)&lt;/span&gt;
holds the number of triangles that include node &lt;span class="math"&gt;\(i\)&lt;/span&gt;. There's still three
more observations we have to make before we are done:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The entry &lt;span class="math"&gt;\(c_{ii}\)&lt;/span&gt; lies at the diagonal of &lt;span class="math"&gt;\(A^3\)&lt;/span&gt;, for every &lt;span class="math"&gt;\(i\)&lt;/span&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Every triangle has three nodes, so if &lt;span class="math"&gt;\(i\)&lt;/span&gt;, &lt;span class="math"&gt;\(j\)&lt;/span&gt;, and &lt;span class="math"&gt;\(k\)&lt;/span&gt; form a triangle
   and we count the triangles involving &lt;span class="math"&gt;\(i\)&lt;/span&gt;, &lt;span class="math"&gt;\(j\)&lt;/span&gt;, and &lt;span class="math"&gt;\(k\)&lt;/span&gt; separately, we
   will be counting the same triangle three times, one for each node.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We discussed how the entries of &lt;span class="math"&gt;\(A^2\)&lt;/span&gt; count the number of length-2 paths
   between pairs of nodes. Similarly, the entries of &lt;span class="math"&gt;\(A^3\)&lt;/span&gt; hold the number
   of length-3 paths. Thus, &lt;span class="math"&gt;\(c_{ii}\)&lt;/span&gt; holds the number of length-3 paths
   that start and end in &lt;span class="math"&gt;\(i\)&lt;/span&gt;. For every triangle, there are two such paths,
   for if &lt;span class="math"&gt;\(i\)&lt;/span&gt;, &lt;span class="math"&gt;\(j\)&lt;/span&gt;, and &lt;span class="math"&gt;\(k\)&lt;/span&gt; are a triangle, then both &lt;span class="math"&gt;\(i-j-k-i\)&lt;/span&gt; and
   &lt;span class="math"&gt;\(i-k-j-i\)&lt;/span&gt; are length-3 paths that start and end in &lt;span class="math"&gt;\(i\)&lt;/span&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Remark 1 says we need only look at the diagonal of &lt;span class="math"&gt;\(A^3\)&lt;/span&gt;, while
observations 2 and 3 indicate we are counting every triangle six times in
total. Since the trace of a matrix is just the sum of its diagonal,
&lt;em&gt;voilà&lt;/em&gt;: &lt;span class="math"&gt;\(tr(A^3)/6\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;So there! That's why &lt;span class="math"&gt;\(tr(A^3)/6\)&lt;/span&gt; counts the number of
triangles.&lt;/p&gt;
&lt;p&gt;I though it was nifty.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/leotrs/erdos/blob/master/solutions/measures/triangles.py"&gt;Here's&lt;/a&gt;
my solution in python (with this exact explanation embedded in the
comments).&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="python"></category><category term="networks"></category></entry><entry><title>Today I wrote an automation script</title><link href="/blog/automated.html" rel="alternate"></link><published>2016-07-25T00:00:00-04:00</published><author><name>Leo Torres</name></author><id>tag:,2016-07-25:blog/automated.html</id><summary type="html">&lt;p&gt;Today I wrote a thing. In the course of writing the first batch of content
for &lt;a href="http://erdosnet.work"&gt;&lt;strong&gt;erdos&lt;/strong&gt;&lt;/a&gt;, I found that the main site resource
("challenge" pages) have mainly the same structure, even with the same
headings, and I'm typing all of it again and again.&lt;/p&gt;
&lt;p&gt;Now, to generate my sites, I use &lt;a href="http://blog.getpelican.com/"&gt;pelican&lt;/a&gt;,
which uses &lt;a href="http://jinja.pocoo.org/"&gt;jinja2&lt;/a&gt; to generate html files from
templates. Since I was creating a lot of files that looked kind of the
same, I thought of writing a quick script that used jinja to generate them
for me.&lt;/p&gt;
&lt;p&gt;Using jinja to generate my files from the template turned out to be
surprisingly easy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;jinja2&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FileSystemLoader&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Creates the appropriate jinja2 objects and renders the template.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FileSystemLoader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEMPLATES_DIR&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEMPLATE_FILE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;make_vars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(You can see the finished product &lt;a href="https://github.com/leotorr/erdos/blob/master/scripts/templates/genarticle.py"&gt;here&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Where &lt;code&gt;make_vars&lt;/code&gt; is a function that parses command line arguments and
transforms them in the variables the template is expecting.&lt;/p&gt;
&lt;p&gt;To glue everything together, I ended up using &lt;code&gt;os&lt;/code&gt;, &lt;code&gt;subprocess&lt;/code&gt;, and I
actually had a lot of fun parsing command line arguments with &lt;code&gt;argparse&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It took me around 90 minutes to learn how to use two new libraries
(&lt;code&gt;argparse&lt;/code&gt;, &lt;code&gt;jinja&lt;/code&gt;), write the template file (which generates the skeleton
for my "challenge" pages for &lt;strong&gt;erdos&lt;/strong&gt;), write a bash script to call my
command for me with the right environment and from the right directory, and
troubleshooting and fixing a couple of bugs.&lt;/p&gt;
&lt;p&gt;Now I want to know how much time this script is going to save me. I
estimate writing one file without the template takes me about 2.5
minutes. Since I took 90 minutes to write this, that means I have to write
36 articles before this is cost-effective.&lt;/p&gt;
&lt;p&gt;Welp, one down, 35 more to go.&lt;/p&gt;</summary><category term="python"></category><category term="shell"></category></entry><entry><title>Today I did a regex</title><link href="/blog/regex.html" rel="alternate"></link><published>2016-07-24T00:00:00-04:00</published><author><name>Leo Torres</name></author><id>tag:,2016-07-24:blog/regex.html</id><summary type="html">&lt;p&gt;OK, it wasn't today, it was a few days ago, and I'm only writing it up
today.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Regular_expression"&gt;Regexes&lt;/a&gt; are powerful
and difficult to master, and I seem to pick up a new feature once every six
months. I'd always used
&lt;a href="https://msdn.microsoft.com/en-us/library/thwdfzxy(v=vs.110).aspx"&gt;backreferences&lt;/a&gt;
on the replacement part of a &lt;code&gt;sed s///&lt;/code&gt; command, to refer to matched
groups, but today I learned you can also use them in the regex itself. For
example, to match a previously captured group again.&lt;/p&gt;
&lt;p&gt;I came across this when I was trying to match as many contiguous
repetitions of any letter, &lt;em&gt;but only the same letter&lt;/em&gt;. This is what I came
up with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;r&amp;#39;((.)\2*)&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I will try to explain what this regex does character by character, but I'll
let &lt;a href="https://regex101.com"&gt;regex101&lt;/a&gt; do it for me:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/((.)\2*)/
1st Capturing group ((.)\2*)

  2nd Capturing group (.)
    . matches any character (except newline)

  \2* matches the same text as most recently matched by the 2nd capturing group
    Quantifier: * Between zero and unlimited times, as many times as
    possible, giving back as needed [greedy]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It basically matches any character, &lt;code&gt;.&lt;/code&gt;, captures it, &lt;code&gt;(.)&lt;/code&gt;, and then
matches it again, &lt;code&gt;\2&lt;/code&gt;, as many times as possible, &lt;code&gt;*&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I thought it was cool.&lt;/p&gt;
&lt;p&gt;Oh, I needed it to implement run-length encoding for an
&lt;a href="http://exercism.io"&gt;exercism&lt;/a&gt; python challenge.&lt;/p&gt;</summary><category term="python"></category></entry><entry><title>Today I did this blog</title><link href="/blog/blog.html" rel="alternate"></link><published>2016-07-23T00:00:00-04:00</published><author><name>Leo Torres</name></author><id>tag:,2016-07-23:blog/blog.html</id><summary type="html">&lt;p&gt;Today I created this blog. I used &lt;a href="http://blog.getpelican.com/"&gt;pelican&lt;/a&gt;, a
site generator written in Python for static sites like this one and
&lt;a href="http://www.erdosnet.work"&gt;erdosnet.work&lt;/a&gt; (yes, I did that one too). I
chose &lt;a href="https://github.com/Parbhat/pelican-blue/"&gt;pelican-blue&lt;/a&gt; for the
theme. Thanks, &lt;a href="https://parbhatpuri.com/"&gt;Parbhat&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;The theme was a bit broken and I had to dive into CSS (something I
dislike), until I got a somewhat functional sticky footer, static home
page, pages with subtitles, and other things all working (something I
love!).&lt;/p&gt;
&lt;p&gt;Update: I have since changed the theme. I'm now using the wonderful
&lt;a href="https://github.com/getpelican/pelican-themes/tree/master/pelican-bootstrap3"&gt;pelican-bootstrap3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I also added the RC ad on the footer down there. If you want to be a better
programmer, you should very very much click on it.&lt;/p&gt;
&lt;p&gt;This was fun!&lt;/p&gt;</summary><category term="webdev"></category><category term="python"></category><category term="pelican"></category><category term="recurse"></category></entry></feed>